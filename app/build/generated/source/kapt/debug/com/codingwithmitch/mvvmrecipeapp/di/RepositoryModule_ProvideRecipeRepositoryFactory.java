// Generated by Dagger (https://dagger.dev).
package com.codingwithmitch.mvvmrecipeapp.di;

import com.codingwithmitch.mvvmrecipeapp.network.RecipeService;
import com.codingwithmitch.mvvmrecipeapp.network.model.RecipeDtoMapper;
import com.codingwithmitch.mvvmrecipeapp.repository.RecipeRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideRecipeRepositoryFactory implements Factory<RecipeRepository> {
  private final Provider<RecipeService> recipeServiceProvider;

  private final Provider<RecipeDtoMapper> recipeMapperProvider;

  public RepositoryModule_ProvideRecipeRepositoryFactory(
      Provider<RecipeService> recipeServiceProvider,
      Provider<RecipeDtoMapper> recipeMapperProvider) {
    this.recipeServiceProvider = recipeServiceProvider;
    this.recipeMapperProvider = recipeMapperProvider;
  }

  @Override
  public RecipeRepository get() {
    return provideRecipeRepository(recipeServiceProvider.get(), recipeMapperProvider.get());
  }

  public static RepositoryModule_ProvideRecipeRepositoryFactory create(
      Provider<RecipeService> recipeServiceProvider,
      Provider<RecipeDtoMapper> recipeMapperProvider) {
    return new RepositoryModule_ProvideRecipeRepositoryFactory(recipeServiceProvider, recipeMapperProvider);
  }

  public static RecipeRepository provideRecipeRepository(RecipeService recipeService,
      RecipeDtoMapper recipeMapper) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideRecipeRepository(recipeService, recipeMapper));
  }
}
